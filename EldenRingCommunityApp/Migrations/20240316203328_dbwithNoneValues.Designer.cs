// <auto-generated />
using System;
using EldenRingCommunityApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EldenRingCommunityApp.Migrations
{
    [DbContext(typeof(EldenRingAppContext))]
    [Migration("20240316203328_dbwithNoneValues")]
    partial class dbwithNoneValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuildSpell", b =>
                {
                    b.Property<int>("BuildsBuildID")
                        .HasColumnType("int");

                    b.Property<int>("SpellsSpellID")
                        .HasColumnType("int");

                    b.HasKey("BuildsBuildID", "SpellsSpellID");

                    b.HasIndex("SpellsSpellID");

                    b.ToTable("BuildSpell");
                });

            modelBuilder.Entity("BuildTalisman", b =>
                {
                    b.Property<int>("BuildsBuildID")
                        .HasColumnType("int");

                    b.Property<int>("TalismansTalismanID")
                        .HasColumnType("int");

                    b.HasKey("BuildsBuildID", "TalismansTalismanID");

                    b.HasIndex("TalismansTalismanID");

                    b.ToTable("BuildTalisman");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Build", b =>
                {
                    b.Property<int>("BuildID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildID"));

                    b.Property<int>("Arcane")
                        .HasColumnType("int");

                    b.Property<int>("ChestArmorID")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Faith")
                        .HasColumnType("int");

                    b.Property<int>("GauntletsID")
                        .HasColumnType("int");

                    b.Property<int>("HelmetID")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("LegArmorID")
                        .HasColumnType("int");

                    b.Property<int>("Mind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingClassID")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Vigor")
                        .HasColumnType("int");

                    b.HasKey("BuildID");

                    b.HasIndex("ChestArmorID");

                    b.HasIndex("GauntletsID");

                    b.HasIndex("HelmetID");

                    b.HasIndex("LegArmorID");

                    b.HasIndex("StartingClassID");

                    b.HasIndex("UserID");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.JoinTables.BuildWeapon", b =>
                {
                    b.Property<int>("BuildWeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildWeaponId"));

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("BuildWeaponId");

                    b.HasIndex("BuildId");

                    b.HasIndex("WeaponId");

                    b.ToTable("BuildWeapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageSendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.AshOfWar", b =>
                {
                    b.Property<int>("AshOfWarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AshOfWarID"));

                    b.Property<string>("Affinity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AshOfWarID");

                    b.ToTable("AshOfWar");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.ChestArmor", b =>
                {
                    b.Property<int>("ChestArmorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChestArmorID"));

                    b.Property<double>("FireResist")
                        .HasColumnType("float");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<double>("HolyResist")
                        .HasColumnType("float");

                    b.Property<int>("Immunity")
                        .HasColumnType("int");

                    b.Property<double>("LightningResist")
                        .HasColumnType("float");

                    b.Property<double>("MagicResist")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhysicalResist")
                        .HasColumnType("float");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("Robustness")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.Property<double>("VsPierce")
                        .HasColumnType("float");

                    b.Property<double>("VsSlash")
                        .HasColumnType("float");

                    b.Property<double>("VsStrike")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ChestArmorID");

                    b.ToTable("ChestArmors");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Gauntlets", b =>
                {
                    b.Property<int>("GauntletsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GauntletsID"));

                    b.Property<double>("FireResist")
                        .HasColumnType("float");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<double>("HolyResist")
                        .HasColumnType("float");

                    b.Property<int>("Immunity")
                        .HasColumnType("int");

                    b.Property<double>("LightningResist")
                        .HasColumnType("float");

                    b.Property<double>("MagicResist")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhysicalResist")
                        .HasColumnType("float");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("Robustness")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.Property<double>("VsPierce")
                        .HasColumnType("float");

                    b.Property<double>("VsSlash")
                        .HasColumnType("float");

                    b.Property<double>("VsStrike")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("GauntletsID");

                    b.ToTable("Gauntlets");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Helmet", b =>
                {
                    b.Property<int>("HelmetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelmetID"));

                    b.Property<double>("FireResist")
                        .HasColumnType("float");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<double>("HolyResist")
                        .HasColumnType("float");

                    b.Property<int>("Immunity")
                        .HasColumnType("int");

                    b.Property<double>("LightningResist")
                        .HasColumnType("float");

                    b.Property<double>("MagicResist")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhysicalResist")
                        .HasColumnType("float");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("Robustness")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.Property<double>("VsPierce")
                        .HasColumnType("float");

                    b.Property<double>("VsSlash")
                        .HasColumnType("float");

                    b.Property<double>("VsStrike")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("HelmetID");

                    b.ToTable("Helmets");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.LegArmor", b =>
                {
                    b.Property<int>("LegArmorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegArmorID"));

                    b.Property<double>("FireResist")
                        .HasColumnType("float");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<double>("HolyResist")
                        .HasColumnType("float");

                    b.Property<int>("Immunity")
                        .HasColumnType("int");

                    b.Property<double>("LightningResist")
                        .HasColumnType("float");

                    b.Property<double>("MagicResist")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhysicalResist")
                        .HasColumnType("float");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("Robustness")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.Property<double>("VsPierce")
                        .HasColumnType("float");

                    b.Property<double>("VsSlash")
                        .HasColumnType("float");

                    b.Property<double>("VsStrike")
                        .HasColumnType("float");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("LegArmorID");

                    b.ToTable("LegArmors");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Spell", b =>
                {
                    b.Property<int>("SpellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellID"));

                    b.Property<int>("ArcaneRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FPCost")
                        .HasColumnType("int");

                    b.Property<int>("FaithRequirement")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlotsUsed")
                        .HasColumnType("int");

                    b.Property<int>("StaminaCost")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellID");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.StartingClass", b =>
                {
                    b.Property<int>("StartingClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StartingClassID"));

                    b.Property<int>("Arcane")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Faith")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Mind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Vigor")
                        .HasColumnType("int");

                    b.HasKey("StartingClassID");

                    b.ToTable("StartingClasses");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Talisman", b =>
                {
                    b.Property<int>("TalismanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TalismanID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TalismanID");

                    b.ToTable("Talismans");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Weapon", b =>
                {
                    b.Property<int>("WeaponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponID"));

                    b.Property<int>("ArcaneRequirement")
                        .HasColumnType("int");

                    b.Property<string>("ArcaneScaling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AshOfWarID")
                        .HasColumnType("int");

                    b.Property<int>("Boost")
                        .HasColumnType("int");

                    b.Property<int>("CritModifier")
                        .HasColumnType("int");

                    b.Property<int>("DexterityRequirement")
                        .HasColumnType("int");

                    b.Property<string>("DexterityScaling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaithRequirement")
                        .HasColumnType("int");

                    b.Property<string>("FaithScaling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FireDamage")
                        .HasColumnType("int");

                    b.Property<int>("FireGuard")
                        .HasColumnType("int");

                    b.Property<int>("HolyDamage")
                        .HasColumnType("int");

                    b.Property<int>("HolyGuard")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceRequirement")
                        .HasColumnType("int");

                    b.Property<string>("IntelligenceScaling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LightningDamage")
                        .HasColumnType("int");

                    b.Property<int>("LightningGuard")
                        .HasColumnType("int");

                    b.Property<int>("MagicDamage")
                        .HasColumnType("int");

                    b.Property<int>("MagicGuard")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paired")
                        .HasColumnType("bit");

                    b.Property<string>("PassiveEffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalDamage")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalGuard")
                        .HasColumnType("int");

                    b.Property<int>("StrengthRequirement")
                        .HasColumnType("int");

                    b.Property<string>("StrengthScaling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeaponTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("WeaponID");

                    b.HasIndex("AshOfWarID");

                    b.HasIndex("WeaponTypeID");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.WeaponType", b =>
                {
                    b.Property<int>("WeaponTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponTypeID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeaponTypeID");

                    b.ToTable("WeaponType");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Tutorial", b =>
                {
                    b.Property<int>("TutorialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorialID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TutorialID");

                    b.HasIndex("UserID");

                    b.ToTable("Tutorials");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BuildSpell", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.Build", null)
                        .WithMany()
                        .HasForeignKey("BuildsBuildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsSpellID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildTalisman", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.Build", null)
                        .WithMany()
                        .HasForeignKey("BuildsBuildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.Talisman", null)
                        .WithMany()
                        .HasForeignKey("TalismansTalismanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Build", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.ChestArmor", "ChestArmor")
                        .WithMany("Builds")
                        .HasForeignKey("ChestArmorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.Gauntlets", "Gauntlets")
                        .WithMany("Builds")
                        .HasForeignKey("GauntletsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.Helmet", "Helmet")
                        .WithMany("Builds")
                        .HasForeignKey("HelmetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.LegArmor", "LegArmor")
                        .WithMany("Builds")
                        .HasForeignKey("LegArmorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.StartingClass", "StartingClass")
                        .WithMany("Builds")
                        .HasForeignKey("StartingClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.User", "User")
                        .WithMany("Builds")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChestArmor");

                    b.Navigation("Gauntlets");

                    b.Navigation("Helmet");

                    b.Navigation("LegArmor");

                    b.Navigation("StartingClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.JoinTables.BuildWeapon", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.Build", "Build")
                        .WithMany("BuildWeapons")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.Weapon", "Weapon")
                        .WithMany("BuildWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Message", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Weapon", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.AshOfWar", "AshOfWar")
                        .WithMany("Weapons")
                        .HasForeignKey("AshOfWarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.SubClasses.WeaponType", "WeaponType")
                        .WithMany("Weapons")
                        .HasForeignKey("WeaponTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AshOfWar");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Tutorial", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.User", "User")
                        .WithMany("Tutorials")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenRingCommunityApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EldenRingCommunityApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.Build", b =>
                {
                    b.Navigation("BuildWeapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.AshOfWar", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.ChestArmor", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Gauntlets", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Helmet", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.LegArmor", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.StartingClass", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.Weapon", b =>
                {
                    b.Navigation("BuildWeapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.SubClasses.WeaponType", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("EldenRingCommunityApp.Models.User", b =>
                {
                    b.Navigation("Builds");

                    b.Navigation("Messages");

                    b.Navigation("Tutorials");
                });
#pragma warning restore 612, 618
        }
    }
}
